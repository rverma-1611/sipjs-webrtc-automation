// Updated client.js using SIP.js UserAgent with Registerer and Inviter
import * as SIP from 'sip.js';

// 1. Configuration (Replace with your SIP server credentials)
const sipUri = 'sip:6000wp@rverma';
const wsServer = 'wss://qa-u22-tor4.netsapiens.com:9002';
const username = '6000';
const password = 's4X8RV0Q8oxvPnaG';
const targetSipUri = 'sip:8070@rverma';

// Get HTML elements
const callStatusElement = document.getElementById('callStatus');
const callButton = document.getElementById('callButton');
const hangupButton = document.getElementById('hangupButton');
const localVideoElement = document.getElementById('localVideoElement');
const remoteVideoElement = document.getElementById('remoteVideoElement');

let userAgent;
let registerer;
let inviter;

// Function to update call status
function updateCallStatus(status) {
    callStatusElement.textContent = `Status: ${status}`;
}

// Function to start the UserAgent and Register
async function startAndRegister() {
    try {
        userAgent = new SIP.UserAgent({
            uri: SIP.UserAgent.makeURI(sipUri),
            transportOptions: {
                server: wsServer
            },
            authorizationUsername: username,
            authorizationPassword: password
        });

        userAgent.delegate = {
            onInvite(invitation) {
                updateCallStatus('Incoming call...');

                invitation.accept({
                    sessionDescriptionHandlerOptions: {
                        constraints: { audio: true, video: true },
                        render: {
                            local: localVideoElement,
                            remote: remoteVideoElement
                        }
                    }
                }).then(() => {
                    updateCallStatus('Call Accepted');
                    hangupButton.disabled = false;
                    callButton.disabled = true;
                }).catch(error => {
                    updateCallStatus(`Error accepting call: ${error.message}`);
                });
            }
        };

        await userAgent.start();

        // âœ… Create Registerer and register
        registerer = new SIP.Registerer(userAgent);
        await registerer.register();

        updateCallStatus('Registered');
        callButton.disabled = false;
        hangupButton.disabled = true;

    } catch (error) {
        updateCallStatus(`Failed to start: ${error.message}`);
        console.error('Error starting UserAgent:', error);
        callButton.disabled = true;
        hangupButton.disabled = true;
    }
}

// Function to make a call
async function makeCall() {
    if (!userAgent) {
        alert('Not registered. Wait for registration to complete.');
        return;
    }

    updateCallStatus('Calling...');
    callButton.disabled = true;
    hangupButton.disabled = false;

    try {
        const targetURI = SIP.UserAgent.makeURI(targetSipUri);
        inviter = new SIP.Inviter(userAgent, targetURI, {
            sessionDescriptionHandlerOptions: {
                constraints: { audio: true, video: true },
                render: {
                    local: localVideoElement,
                    remote: remoteVideoElement
                }
            }
        });

        inviter.stateChange.addListener((state) => {
            switch (state) {
                case SIP.SessionState.Establishing:
                    updateCallStatus('Ringing...');
                    break;
                case SIP.SessionState.Established:
                    updateCallStatus('Call Established');
                    break;
                case SIP.SessionState.Terminated:
                    updateCallStatus('Call Ended');
                    callButton.disabled = false;
                    hangupButton.disabled = true;
                    break;
            }
        });

        await inviter.invite();

    } catch (error) {
        updateCallStatus(`Call Error: ${error.message}`);
        console.error('Call Error:', error);
        callButton.disabled = false;
        hangupButton.disabled = true;
        inviter = null;
    }
}

// Function to hang up a call
function hangupCall() {
    if (inviter) {
        updateCallStatus('Hanging up...');
        inviter.bye();
        inviter = null;
        updateCallStatus('Call ended');
        callButton.disabled = false;
        hangupButton.disabled = true;
        localVideoElement.srcObject = null;
        remoteVideoElement.srcObject = null;
    } else if (registerer) {
        registerer.unregister();
    }
}

// Event Listeners
callButton.addEventListener('click', makeCall);
hangupButton.addEventListener('click', hangupCall);
window.addEventListener('load', startAndRegister);
